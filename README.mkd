Digraph Realtime Task Framework
===============================
_A framework for schedulability analysis of Digraph Realtime Task Models._

Building dirt
-------------------------------
To build dirt you'll need cmake (>= 2.8). You'll typically want to do an out of source build.
If current working directory is the source root folder (called dirt/) just do:

  $ cd ..
  $ mkdir dirt-build
  $ cmake ../dirt
  $ make

This assumes your dirt checkout is in dirt/, and it will leave compiled result in ../dirt-build/.
You can define build type by giving -DCMAKE_BUILD_TYPE=Debug|Release to cmake.
To build documentation (using doxygen) run make doc, and HTML documentation will be in doc/.

Things To Do
-------------------------------
  * Check what `deadline(u) < delay(u, v)` means for utilization and DBF algorithms, there's an impact!
  * Add `main.cpp` with `getopt_long` for reading options (See bnc for an example)
  * Output Demand-Bound-Function as graph, look at step functions with gnuplot (consider public DemandTuple)
  * Refactor `mtime` should be renamed to `delay` in all the places it's used
  * Implement `MonotonicUtilizationAlgorithm` using observations from Lawler
  * Implement `BinaryUtilizationAlgorihtm` using observations from Lawler
  * Wrap the framework in a namespace, come up with a fancy name!
  * Configure a build system using cmake
  * Add fancy Qt graphical user interface, reuse architecture from PeTe, but make it single document interface
  * Integrate documentation generation with build system



